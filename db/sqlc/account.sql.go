// Code generated by sqlc. DO NOT EDIT.
// source: account.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO acounts (
  owner,
  balance,
  currency
) VALUES (
  $1, $2, $3
)RETURNING id, owner, balance, currency, created_at
`

type CreateAccountParams struct {
	Owner    string `json:"owner"`
	Balance  int64  `json:"balance"`
	Currency string `json:"currency"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Acount, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Owner, arg.Balance, arg.Currency)
	var i Acount
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAcount = `-- name: DeleteAcount :exec
DELETE FROM acounts
WHERE id = $1
`

func (q *Queries) DeleteAcount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAcount, id)
	return err
}

const getAcount = `-- name: GetAcount :one
SELECT id, owner, balance, currency, created_at FROM acounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAcount(ctx context.Context, id int64) (Acount, error) {
	row := q.db.QueryRowContext(ctx, getAcount, id)
	var i Acount
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const listAcounts = `-- name: ListAcounts :many
SELECT id, owner, balance, currency, created_at FROM acounts
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAcountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAcounts(ctx context.Context, arg ListAcountsParams) ([]Acount, error) {
	rows, err := q.db.QueryContext(ctx, listAcounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Acount
	for rows.Next() {
		var i Acount
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAcount = `-- name: UpdateAcount :one
UPDATE acounts
  set balance = $2
WHERE id = $1
RETURNING id, owner, balance, currency, created_at
`

type UpdateAcountParams struct {
	ID      int64 `json:"id"`
	Balance int64 `json:"balance"`
}

func (q *Queries) UpdateAcount(ctx context.Context, arg UpdateAcountParams) (Acount, error) {
	row := q.db.QueryRowContext(ctx, updateAcount, arg.ID, arg.Balance)
	var i Acount
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}
